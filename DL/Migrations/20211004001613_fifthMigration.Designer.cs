// <auto-generated />
using System;
using DL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace DL.Migrations
{
    [DbContext(typeof(StoreDBContext))]
    [Migration("20211004001613_fifthMigration")]
    partial class fifthMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<int>("CustomerDefaultStoreID")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Models.Inventory", b =>
                {
                    b.Property<int>("InventoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("InvProductID")
                        .HasColumnType("integer");

                    b.Property<int>("InvStoreID")
                        .HasColumnType("integer");

                    b.Property<int?>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int?>("StoreFrontId")
                        .HasColumnType("integer");

                    b.HasKey("InventoryID");

                    b.HasIndex("ProductId");

                    b.HasIndex("StoreFrontId");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("Models.LineItem", b =>
                {
                    b.Property<int>("LineItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("InventoriesInventoryID")
                        .HasColumnType("integer");

                    b.Property<int>("LineOrderID")
                        .HasColumnType("integer");

                    b.Property<int>("LineProductID")
                        .HasColumnType("integer");

                    b.Property<long?>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("StoreId")
                        .HasColumnType("integer");

                    b.HasKey("LineItemId");

                    b.HasIndex("InventoriesInventoryID");

                    b.HasIndex("OrderId");

                    b.ToTable("LineItems");
                });

            modelBuilder.Entity("Models.Order", b =>
                {
                    b.Property<long>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("OrderCustomerID")
                        .HasColumnType("integer");

                    b.Property<int>("OrderStoreID")
                        .HasColumnType("integer");

                    b.Property<decimal>("OrderTotal")
                        .HasColumnType("numeric");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Genre")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("ProductName")
                        .HasColumnType("text");

                    b.HasKey("ProductId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Models.ShoppingCart", b =>
                {
                    b.Property<int>("ShoppingCartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("ShoppingCartCustomerCustomerId")
                        .HasColumnType("integer");

                    b.Property<int?>("ShoppingCartProdProductId")
                        .HasColumnType("integer");

                    b.Property<int>("ShoppingCartQuantity")
                        .HasColumnType("integer");

                    b.HasKey("ShoppingCartId");

                    b.HasIndex("ShoppingCartCustomerCustomerId");

                    b.HasIndex("ShoppingCartProdProductId");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("Models.StoreFront", b =>
                {
                    b.Property<int>("StoreFrontId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("StoreCity")
                        .HasColumnType("text");

                    b.Property<string>("StoreCountry")
                        .HasColumnType("text");

                    b.Property<string>("StoreName")
                        .HasColumnType("text");

                    b.Property<string>("StoreState")
                        .HasColumnType("text");

                    b.Property<string>("StoreStreet")
                        .HasColumnType("text");

                    b.HasKey("StoreFrontId");

                    b.ToTable("StoreFronts");
                });

            modelBuilder.Entity("Models.Inventory", b =>
                {
                    b.HasOne("Models.Product", "Product")
                        .WithMany("Inventories")
                        .HasForeignKey("ProductId");

                    b.HasOne("Models.StoreFront", "StoreFront")
                        .WithMany("Inventories")
                        .HasForeignKey("StoreFrontId");

                    b.Navigation("Product");

                    b.Navigation("StoreFront");
                });

            modelBuilder.Entity("Models.LineItem", b =>
                {
                    b.HasOne("Models.Inventory", "Inventories")
                        .WithMany("LineItemsList")
                        .HasForeignKey("InventoriesInventoryID");

                    b.HasOne("Models.Order", "Order")
                        .WithMany("LineItems")
                        .HasForeignKey("OrderId");

                    b.Navigation("Inventories");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Models.Order", b =>
                {
                    b.HasOne("Models.Customer", "Customer")
                        .WithMany("OrdersList")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Models.ShoppingCart", b =>
                {
                    b.HasOne("Models.Customer", "ShoppingCartCustomer")
                        .WithMany()
                        .HasForeignKey("ShoppingCartCustomerCustomerId");

                    b.HasOne("Models.Product", "ShoppingCartProd")
                        .WithMany()
                        .HasForeignKey("ShoppingCartProdProductId");

                    b.Navigation("ShoppingCartCustomer");

                    b.Navigation("ShoppingCartProd");
                });

            modelBuilder.Entity("Models.Customer", b =>
                {
                    b.Navigation("OrdersList");
                });

            modelBuilder.Entity("Models.Inventory", b =>
                {
                    b.Navigation("LineItemsList");
                });

            modelBuilder.Entity("Models.Order", b =>
                {
                    b.Navigation("LineItems");
                });

            modelBuilder.Entity("Models.Product", b =>
                {
                    b.Navigation("Inventories");
                });

            modelBuilder.Entity("Models.StoreFront", b =>
                {
                    b.Navigation("Inventories");
                });
#pragma warning restore 612, 618
        }
    }
}
